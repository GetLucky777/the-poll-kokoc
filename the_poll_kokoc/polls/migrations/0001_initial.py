# Generated by Django 2.2.16 on 2022-07-18 14:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='Текст ответа', max_length=50, verbose_name='Текст')),
            ],
        ),
        migrations.CreateModel(
            name='Colors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(choices=[('bg-secondary', 'BLACK'), ('bg-primary', 'BLUE'), ('bg-danger', 'RED'), ('bg-success', 'GREEN')], max_length=20)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=6)),
            ],
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название опроса', max_length=200, verbose_name='Название')),
                ('description', models.TextField(help_text='Название опроса', verbose_name='Описание')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Дата создания опроса', verbose_name='Дата')),
                ('reward', models.DecimalField(blank=True, decimal_places=2, help_text='Награда за прохождение опроса', max_digits=6, verbose_name='Награда')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Текст вопроса', verbose_name='Текст')),
                ('poll', models.ForeignKey(help_text='Опрос, в котором находится вопрос', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='polls.Poll', verbose_name='Опрос')),
            ],
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.ForeignKey(help_text='Ответ пользователя', on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='polls.Answer', verbose_name='Ответ')),
                ('poll', models.ForeignKey(help_text='Опрос', on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='polls.Poll', verbose_name='Опрос')),
                ('question', models.ForeignKey(help_text='Заданный вопрос', on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='polls.Question', verbose_name='Вопрос')),
                ('user', models.ForeignKey(help_text='Пользователь, давший ответ', on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('login', 'Login'), ('backgrnd', 'Background')], max_length=15)),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='polls.Colors')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='answer',
            name='poll',
            field=models.ForeignKey(help_text='Опрос', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='polls.Poll', verbose_name='Опрос'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(help_text='Заданный вопрос', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='polls.Question', verbose_name='Вопрос'),
        ),
        migrations.AddField(
            model_name='user',
            name='background_color',
            field=models.ForeignKey(blank=True, help_text='Цвет бэкграунда', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_backgrnd_color', to='polls.Colors'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='login_color',
            field=models.ForeignKey(blank=True, help_text='Цвет рамки логина', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_login_color', to='polls.Colors'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='useranswer',
            constraint=models.UniqueConstraint(fields=('poll', 'question', 'user'), name='unique poll try'),
        ),
        migrations.AddConstraint(
            model_name='purchase',
            constraint=models.UniqueConstraint(fields=('color', 'user', 'type'), name='unique purchase'),
        ),
    ]
